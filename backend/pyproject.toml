[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "PG-VENV"
version = "0.1.0"
description = "A smart camera roll application with vector powered semantic search"
authors = [{name = "Carter Perez | Connor Boetig", email = "dev@pgvenv.com"}]
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["fastapi", "multimodal", "search", "ai", "gemini", "openai", "vector", "memes"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Framework
    "fastapi==0.116.1",
    "uvicorn[standard]==0.35.0",
    "python-multipart==0.0.20",
    
    # Database
    "asyncpg==0.30.0",
    "pgvector==0.4.1",
    "sqlalchemy==2.0.41",
    "alembic==1.16.4",
    
    # AI/ML
    "google-genai==1.25.0",
    "openai==1.95.1",
    "pillow==11.3.0",
    "opencv-python-headless==4.12.0.88",
    
    # Authentication
    "python-jose[cryptography]==3.5.0",
    "passlib[bcrypt]==1.7.4",
    
    # Caching
    "redis==6.2.0",
    
    # Utils
    "pydantic[email]==2.11.7",
    "pydantic-settings==2.10.1",
    "python-dotenv==1.1.1",
    "aiofiles==24.1.0",
    "httpx==0.28.1",
    "slowapi==0.1.9",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.2.1",
    "pytest-env==1.1.5",
    "ruff==0.12.2",
    "mypy==1.16.1",
    "types-redis==4.6.0.20241004",
    "types-passlib==1.7.7.20250602",
    "types-python-jose==3.5.0.20250531",
    "faker==37.4.0",
    "factory-boy==3.3.3",
]

[project.urls]
"Homepage" = "https://github.com/ConnorBoetig-dev/Venv"
"Bug Tracker" = "https://github.com/ConnorBoetig-dev/Venv/issues"
"Documentation" = "https://github.com/ConnorBoetig-dev/Venv/tree/main/meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]

[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "__init__.py",
    "migrations",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR0911", # too many return statements
    "B008",   # do not perform function calls in argument defaults
    "ARG001", # unused function argument (FastAPI requires certain signatures)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py files
"tests/*" = ["S101", "ARG", "PLR2004"]  # assert statements and magic values in tests

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--tb=short",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (require services)",
    "slow: Slow running tests",
    "requires_api_keys: Tests requiring real API keys",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "google.genai.*",
    "cv2.*",
    "PIL.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
